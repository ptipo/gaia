import { AppInstance } from './app-instance';
import { Concept } from './concept';
import { TranslationFunction } from './i18n';
import { BaseConceptModel, inferConcept } from './inference';
import { ValidationIssueCode } from './validation';

/**
 * Config aspects.
 */
export type ConfigAspects = 'content' | 'design' | 'setting';

/**
 * Non-primitive types.
 */
export enum NonPrimitiveTypes {
    concept = 'concept',
    ref = 'ref',
    image = 'image',
    logicalGroup = 'logical-group',
    itemGroup = 'item-group',
    code = 'code',
}

/**
 * Context data for invoking a provider callback.
 */
export type ProviderContext = {
    /**
     * The app instance
     */
    app: AppInstance<Concept>;

    /**
     * The app's root model
     */
    rootModel: BaseConceptModel;

    /**
     * The current context model
     */
    currentModel: any;

    /**
     * Function for translating texts in app config
     */
    ct: TranslationFunction;
};

/**
 * Context for calling initializer of a concept.
 */
export type InitializeContext = {
    /**
     * The app instance
     */
    app: AppInstance<Concept>;
};

/**
 * Issues reported by custom validation.
 */
export type CustomValidationIssue = { code: ValidationIssueCode; message: string; path: (string | number)[] };

/**
 * Custom validator for a concept.
 */
export type ConceptCustomValidator = (model: BaseConceptModel) => CustomValidationIssue[] | undefined;

/**
 * Data for a selected concept instance.
 */
export type SelectionData = {
    /**
     * The selected concept
     */
    concept: Concept;

    /**
     * The selected concept instance id
     */
    id: string;
};

/**
 * Config validation issue.
 */
export type ValidationIssue = {
    /**
     * Path to the issue.
     */
    path: (string | number)[];

    /**
     * Issue code.
     */
    code: ValidationIssueCode;

    /**
     * Issue message.
     */
    message: string;

    /**
     * Custom message.
     */
    customMessage?: string;
};

/**
 * Validation result.
 */
export type ValidationResult<TConcept extends Concept> =
    | {
          success: true;
          model: inferConcept<TConcept>;
      }
    | { success: false; issues: ValidationIssue[] };

/**
 * Context data for invoking provider for computing hint messages used in model generation.
 */
export type ModelGenerationHintProviderArgs = {
    /**
     * Input kind.
     */
    kind: 'user-input' | 'elaboration';

    /**
     * The aspect of the configuration to generate for.
     */
    aspect?: ConfigAspects;

    /**
     * Translation function.
     */
    ct: TranslationFunction;
};

/**
 * Model generation input.
 */
export type ModelGenerationArgs = {
    /**
     * The current model that the generation can start from.
     */
    currentModel?: BaseConceptModel;

    /**
     * The aspect of the configuration to generate for. Defaults to all.
     */
    aspect?: ConfigAspects;

    /**
     * The kind of input: user-provided or elaboration generated by a previous generation step.
     */
    kind: 'user-input' | 'elaboration';

    /**
     * The input data.
     */
    data: string;

    /**
     * Secret keys used for model generation.
     */
    secrets?: unknown;

    /**
     * The identity of the user requesting the model generation.
     */
    userIdentity?: string;
};

/**
 * Result of model generation.
 */
export type ModelGenerationResult =
    | {
          kind: 'model';
          result: BaseConceptModel;
      }
    | {
          kind: 'elaboration';
          result: string;
      };
